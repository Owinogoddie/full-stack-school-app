interface PaymentAllocation {
  feeTypeId: string;
  amount: number;
}

export async function recordPayment(data: {
  studentId: string;
  academicYearId: number;
  termId: string;
  totalAmount: number;
  method: PaymentMethod;
  allocations: PaymentAllocation[];
  notes?: string;
}) {
  // Validate total amount matches allocations
  const totalAllocated = data.allocations.reduce((sum, a) => sum + a.amount, 0);
  if (totalAllocated !== data.totalAmount) {
    throw new Error("Allocated amounts don't match total payment");
  }

  // Start transaction
  return prisma.$transaction(async (tx) => {
    // Generate receipt number
    const receiptNumber = `RCP-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

    // Create main transaction record
    const mainTransaction = await tx.feeTransaction.create({
      data: {
        studentId: data.studentId,
        amount: data.totalAmount,
        method: data.method,
        receiptNumber,
        academicYearId: data.academicYearId,
        termId: data.termId,
        notes: data.notes,
        status: 'COMPLETED',
        paymentDate: new Date()
      }
    });

    // Record allocations
    const allocationRecords = await Promise.all(
      data.allocations.map(async allocation => {
        // Find applicable template for fee type
        const template = await tx.feeTemplate.findFirst({
          where: {
            feeTypeId: allocation.feeTypeId,
            academicYearId: data.academicYearId,
            termId: data.termId,
            isActive: true
          }
        });

        if (!template) {
          throw new Error(`No active template found for fee type ${allocation.feeTypeId}`);
        }

        // Create allocation record
        return tx.paymentAllocation.create({
          data: {
            transactionId: mainTransaction.id,
            feeTemplateId: template.id,
            amount: allocation.amount
          }
        });
      })
    );

    // Update student balances
    await updateStudentBalances(tx, data.studentId, data.academicYearId, data.termId);

    return {
      transaction: mainTransaction,
      allocations: allocationRecords
    };
  });
}