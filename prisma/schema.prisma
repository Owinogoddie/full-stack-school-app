generator client {
  provider = "prisma-client-js"
}

// dd
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model School {
  id            String         @id @default(uuid())
  name          String
  code          String         @unique
  address       String
  county        String
  subCounty     String
  type          SchoolType
  category      SchoolCategory
  foundedYear   Int
  principalName String
  contactEmail  String
  contactPhone  String
  website       String?
  students      Student[]
  teachers      Teacher[]
  classes       Class[]
  grades        Grade[]
  exams         Exam[]
  gradeScales   GradeScale[]
  academicYears AcademicYear[]
  departments   Department[]
  enrollments   Enrollment[]
  curricula     Curriculum[]

  feeTypes          FeeType[]
  specialProgrammes SpecialProgramme[]

  studentCategories   StudentCategory[]
  books               Book[]
  clubs               Club[]
  transfersFrom       TransferRecord[]     @relation("FromSchool")
  transfersTo         TransferRecord[]     @relation("ToSchool")
  specializedPrograms SpecializedProgram[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model AcademicYear {
  id                  Int            @id @default(autoincrement())
  year                String
  startDate           DateTime
  endDate             DateTime
  currentAcademicYear Boolean        @default(false)
  students            Enrollment[]
  school              School?        @relation(fields: [schoolId], references: [id])
  currentStudents     Student[]      @relation("CurrentAcademicYear")
  schoolId            String?
  results             Result[]
  finalResults        FinalResult[]
  exams               Exam[]
  terms               Term[]
  feeStatus           FeeStatus[]
  payments            Payment[]
  excessFees          ExcessFee[]
  feeStructures       FeeStructure[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}

model Term {
  id             String         @id @default(uuid())
  name           String
  startDate      DateTime
  endDate        DateTime
  academicYearId Int
  academicYear   AcademicYear   @relation(fields: [academicYearId], references: [id])
  feeStructures  FeeStructure[]
  feeStatus      FeeStatus[]
  excessFees     ExcessFee[]
  payments       Payment[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Enrollment {
  id             Int              @id @default(autoincrement())
  status         EnrollmentStatus @default(ACTIVE)
  student        Student          @relation(fields: [studentId], references: [id])
  studentId      String
  grade          Grade            @relation(fields: [gradeId], references: [id])
  gradeId        Int
  academicYear   AcademicYear     @relation(fields: [academicYearId], references: [id])
  academicYearId Int
  class          Class?           @relation(fields: [classId], references: [id])
  classId        Int?
  school         School?          @relation(fields: [schoolId], references: [id])
  schoolId       String?
  enrollmentDate DateTime         @default(now())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Grade {
  id                 Int                 @id @default(autoincrement())
  levelName          GradeLevel // e.g., "PP1", "PP2", "Grade 1", "Grade 2", ..., "Grade 12"
  stage              Stage
  description        String?
  classes            Class[]
  subjects           Subject[]
  learningAreas      LearningArea[]
  school             School?             @relation(fields: [schoolId], references: [id])
  schoolId           String?
  students           Student[]
  enrollments        Enrollment[]
  results            Result[]
  finalResults       FinalResult[]
  exams              Exam[]
  learningObjectives LearningObjective[]
  specialProgrammes  SpecialProgramme[]
  feeStructures      FeeStructure[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model Class {
  id                Int                @id @default(autoincrement())
  name              String // e.g., "PP1A", "Grade 3B"
  capacity          Int
  schedule          Json?
  grade             Grade              @relation(fields: [gradeId], references: [id])
  gradeId           Int
  school            School?            @relation(fields: [schoolId], references: [id])
  schoolId          String?
  supervisor        Teacher?           @relation(fields: [supervisorId], references: [id])
  supervisorId      String?
  students          Student[]
  lessons           Lesson[]
  announcements     Announcement[]
  enrollments       Enrollment[]
  events            Event[]
  results           Result[]
  finalResults      FinalResult[]
  attendances       Attendance[]
  specialProgrammes SpecialProgramme[]
  feeStructures     FeeStructure[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Parent {
  id         String    @id @default(uuid())
  nationalId String?   @unique
  firstName  String
  lastName   String
  email      String?   @unique
  phone      String    @unique
  address    String?
  img        String?
  students   Student[] // Relation to students, assuming a parent can have multiple children
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Student {
  id                    String             @id @default(uuid())
  upi                   String             @unique
  admissionNumber       String             @unique
  img                   String?
  firstName             String
  lastName              String
  dateOfBirth           DateTime
  gender                Gender
  address               String
  class                 Class?             @relation(fields: [classId], references: [id])
  classId               Int?
  grade                 Grade              @relation(fields: [gradeId], references: [id])
  gradeId               Int
  school                School?            @relation(fields: [schoolId], references: [id])
  schoolId              String?
  parent                Parent?            @relation(fields: [parentId], references: [id])
  parentId              String?
  enrollmentDate        DateTime
  medicalInfo           String?
  specialNeeds          String?
  currentAcademicYear   AcademicYear?      @relation("CurrentAcademicYear", fields: [currentAcademicYearId], references: [id])
  currentAcademicYearId Int?
  status                StudentStatus      @default(ACTIVE)
  graduationDate        DateTime?
  assessments           Assessment[]
  enrollments           Enrollment[]
  projects              Project[]
  attendances           Attendance[]
  transferRecords       TransferRecord[]
  receivedFiles         File[]             @relation("StudentFiles")
  results               Result[]
  studentCategories     StudentCategory[]
  feeExceptions         FeeException[]
  specialProgrammes     SpecialProgramme[]
  payments              Payment[]
  feeStatus             FeeStatus[]
  excessFees            ExcessFee[]

  finalResults        FinalResult[]
  bookLoans           BookLoan[]
  clubs               Club[]
  specializedPrograms SpecializedProgram[]
  healthRecord        HealthRecord?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model StudentCategory {
  id            String         @id @default(uuid())
  name          String
  description   String?
  schoolId      String?
  school        School?        @relation(fields: [schoolId], references: [id])
  students      Student[]
  feeStructures FeeStructure[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Teacher {
  id                  String               @id @default(uuid())
  tscNumber           String               @unique
  firstName           String
  lastName            String
  dateOfBirth         DateTime
  gender              Gender
  nationalId          String               @unique
  email               String               @unique
  phone               String
  address             String
  img                 String?
  qualifications      String[]
  specializations     String[]
  employmentStatus    EmploymentStatus
  hireDate            DateTime
  subjects            Subject[]
  classes             Class[]
  school              School?              @relation(fields: [schoolId], references: [id])
  schoolId            String?
  lessons             Lesson[]
  specializedPrograms SpecializedProgram[]
  department          Department?          @relation("DepartmentTeachersRelation", fields: [departmentId], references: [id])
  departmentId        Int?
  headOfDepartment    Department?          @relation("HeadTeacherRelation")
  sentFiles           File[]               @relation("SentFiles")
  receivedFiles       File[]               @relation("ReceivedFiles")
  createdMeetings     Meeting[]            @relation("MeetingCreator")
  attendedMeetings    Meeting[]            @relation("MeetingAttendees")

  supervisedClubs Club[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Admin {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subject {
  id                  Int                  @id @default(autoincrement())
  name                String
  code                String               @unique
  description         String?
  teachers            Teacher[]
  grades              Grade[]
  lessons             Lesson[]
  results             Result[]
  exams               Exam[]
  category            SubjectCategory      @default(CORE)
  curriculum          Curriculum?          @relation(fields: [curriculumId], references: [id])
  curriculumId        Int?
  learningObjectives  LearningObjective[]
  examSchedules       ExamSchedule[]
  learningAreas       LearningArea[]
  specializedPrograms SpecializedProgram[]

  // Relations for parent and children subjects
  parentId Int?
  parent   Subject?  @relation("SubjectHierarchy", fields: [parentId], references: [id])
  children Subject[] @relation("SubjectHierarchy")

  // Relation for related subjects
  relatedFrom Subject[] @relation("RelatedSubjects")
  relatedTo   Subject[] @relation("RelatedSubjects")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Curriculum {
  id               Int              @id @default(autoincrement())
  name             String
  description      String?
  type             CurriculumType
  subjects         Subject[]
  learningAreas    LearningArea[]
  school           School?          @relation(fields: [schoolId], references: [id])
  schoolId         String?
  coreCompetencies CoreCompetency[] // Added relation to CoreCompetency
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model LearningObjective {
  id        Int      @id @default(autoincrement())
  objective String
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId Int
  grade     Grade    @relation(fields: [gradeId], references: [id])
  gradeId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SpecialProgramme {
  id            String         @id @default(uuid())
  name          String
  description   String?
  schoolId      String?
  school        School?        @relation(fields: [schoolId], references: [id])
  grades        Grade[]
  classes       Class[]
  students      Student[]
  feeStructures FeeStructure[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model FeeAuditLog {
  id          String   @id @default(cuid()) // Unique identifier for each log entry
  entityType  String // Type of entity (e.g., FEE_TEMPLATE, FEE_EXCEPTION, PAYMENT, STUDENT_FEE)
  entityId    String // ID of the entity being changed
  action      String // Action performed (e.g., CREATE, UPDATE, DELETE, PAYMENT, ADJUSTMENT)
  changes     String // JSON string of changes made
  performedBy String // ID of the user who performed the action
  timestamp   DateTime @default(now()) // Timestamp of when the action occurred
  metadata    String? // Optional metadata as JSON string for additional context
  oldValues   Json? // Previous values
  newValues   Json? // New values
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FeeType {
  id            String         @id @default(uuid())
  name          String
  description   String?
  amount        Float?
  schoolId      String?
  school        School?        @relation(fields: [schoolId], references: [id])
  feeStructures FeeStructure[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model FeeStructure {
  id                String             @id @default(uuid())
  feeType           FeeType            @relation(fields: [feeTypeId], references: [id])
  feeTypeId         String
  categories        StudentCategory[]
  grades            Grade[]
  classes           Class[]
  amount            Float
  frequency         String?
  academicYear      AcademicYear       @relation(fields: [academicYearId], references: [id])
  academicYearId    Int
  term              Term?              @relation(fields: [termId], references: [id])
  termId            String?
  dueDate           DateTime
  exceptions        FeeException[]
  feeStatus         FeeStatus[]
  specialProgrammes SpecialProgramme[]
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model FeeException {
  id             String        @id @default(uuid())
  student        Student       @relation(fields: [studentId], references: [id])
  studentId      String
  feeStructure   FeeStructure  @relation(fields: [feeStructureId], references: [id])
  feeStructureId String
  amount         Float
  reason         String
  startDate      DateTime
  endDate        DateTime?
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@unique([studentId, feeStructureId])
}

model Payment {
  id             String       @id @default(uuid())
  student        Student      @relation(fields: [studentId], references: [id])
  studentId      String
  feeStatus      FeeStatus    @relation(fields: [feeStatusId], references: [id])
  feeStatusId    String
  amount         Float
  paymentDate    DateTime     @default(now())
  dueDate        DateTime
  term           Term         @relation(fields: [termId], references: [id])
  termId         String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId Int
  description    String?
  paymentType    String // "CASH", "BANK", "MOBILE_MONEY","CHEQUE","OTHER"
  status         String // "PENDING", "COMPLETED", "FAILED"
  reference      String?
  hasExcessFee         Boolean  @default(false)
  excessAmount         Float    @default(0)
  generatedExcessFeeId String?  @unique// Reference to the ExcessFee record
  generatedExcessFee   ExcessFee? @relation("GeneratedFromPayment", fields: [generatedExcessFeeId], references: [id])

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model FeeStatus {
  id             String       @id @default(uuid())
  student        Student      @relation(fields: [studentId], references: [id])
  studentId      String
  feeStructure   FeeStructure @relation(fields: [feeStructureId], references: [id])
  feeStructureId String

  term           Term         @relation(fields: [termId], references: [id])
  termId         String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId Int

  dueAmount   Float
  paidAmount  Float     @default(0)
  dueDate     DateTime
  status      String // "PENDING", "PARTIAL", "COMPLETED", "OVERDUE"
  lastPayment DateTime?
  payments    Payment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([studentId, feeStructureId, termId, academicYearId])
}

model ExcessFee {
  id             String       @id @default(uuid())
  student        Student      @relation(fields: [studentId], references: [id])
  studentId      String
  amount         Float
  term           Term         @relation(fields: [termId], references: [id])
  termId         String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId Int
  description    String?
  isUsed         Boolean      @default(false)
  generatingPayment    Payment? @relation("GeneratedFromPayment")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Book {
  id          Int        @id @default(autoincrement())
  title       String
  author      String
  isbn        String     @unique
  publisher   String?
  year        Int?
  category    String?
  description String?
  quantity    Int
  school      School?    @relation(fields: [schoolId], references: [id])
  schoolId    String?
  loans       BookLoan[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model BookLoan {
  id         Int        @id @default(autoincrement())
  book       Book       @relation(fields: [bookId], references: [id])
  bookId     Int
  student    Student    @relation(fields: [studentId], references: [id])
  studentId  String
  loanDate   DateTime
  returnDate DateTime?
  status     LoanStatus
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Club {
  id           Int       @id @default(autoincrement())
  name         String
  description  String?
  supervisor   Teacher   @relation(fields: [supervisorId], references: [id])
  supervisorId String
  members      Student[]
  school       School?   @relation(fields: [schoolId], references: [id])
  schoolId     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model HealthRecord {
  id               Int      @id @default(autoincrement())
  student          Student  @relation(fields: [studentId], references: [id])
  studentId        String   @unique
  bloodType        String?
  allergies        String?
  medicalHistory   String?
  emergencyContact String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model LearningArea {
  id           Int        @id @default(autoincrement())
  name         String
  description  String
  grade        Grade      @relation(fields: [gradeId], references: [id])
  gradeId      Int
  subjects     Subject[]
  curriculum   Curriculum @relation(fields: [curriculumId], references: [id]) // Added relation to Curriculum
  curriculumId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Lesson {
  id          Int          @id @default(autoincrement())
  name        String
  day         Day
  startTime   DateTime
  endTime     DateTime
  subject     Subject      @relation(fields: [subjectId], references: [id])
  subjectId   Int
  class       Class        @relation(fields: [classId], references: [id])
  classId     Int
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  teacherId   String
  attendances Attendance[]
  assignments Assignment[]
  exams       Exam[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Result {
  id             Int          @id @default(autoincrement())
  student        Student      @relation(fields: [studentId], references: [id])
  studentId      String
  exam           Exam         @relation(fields: [examId], references: [id])
  examId         Int
  subject        Subject      @relation(fields: [subjectId], references: [id])
  subjectId      Int
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId Int
  grade          Grade        @relation(fields: [gradeId], references: [id])
  gradeId        Int
  class          Class?       @relation(fields: [classId], references: [id])
  classId        Int?
  score          Float
  gradeScale     GradeScale   @relation(fields: [gradeScaleId], references: [id])
  gradeScaleId   Int
  resultGrade    String?
  remarks        String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([studentId, examId, subjectId])
}

model Assessment {
  id           Int              @id @default(autoincrement())
  title        String
  type         AssessmentType
  description  String
  dueDate      DateTime
  maxScore     Int
  student      Student          @relation(fields: [studentId], references: [id])
  studentId    String
  score        Int?
  feedback     String?
  competencies CoreCompetency[] // Many-to-many relation with CoreCompetency
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model CoreCompetency {
  id           Int          @id @default(autoincrement())
  name         String
  description  String
  curriculum   Curriculum   @relation(fields: [curriculumId], references: [id])
  curriculumId Int
  assessments  Assessment[] // Many-to-many relation with Assessment
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Assignment {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  dueDate     DateTime
  startDate   DateTime
  lesson      Lesson   @relation(fields: [lessonId], references: [id])
  lessonId    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  dueDate     DateTime
  student     Student       @relation(fields: [studentId], references: [id])
  studentId   String
  status      ProjectStatus
  feedback    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model FinalResult {
  id             Int               @id @default(autoincrement())
  student        Student           @relation(fields: [studentId], references: [id])
  studentId      String
  academicYear   AcademicYear      @relation(fields: [academicYearId], references: [id])
  academicYearId Int
  grade          Grade             @relation(fields: [gradeId], references: [id])
  gradeId        Int
  class          Class?            @relation(fields: [classId], references: [id])
  classId        Int?
  overallAverage Float
  subjectResults Json
  examResults    FinalResultExam[]
  promoted       Boolean           @default(false)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@unique([studentId, academicYearId])
}

model FinalResultExam {
  finalResult   FinalResult @relation(fields: [finalResultId], references: [id])
  finalResultId Int
  exam          Exam        @relation(fields: [examId], references: [id])
  examId        Int

  @@id([finalResultId, examId])
  @@unique([finalResultId, examId])
}

model Exam {
  id             Int               @id @default(autoincrement())
  title          String
  description    String?
  examType       ExamType
  startDate      DateTime
  endDate        DateTime
  lessonId       Int?
  lesson         Lesson?           @relation(fields: [lessonId], references: [id])
  subjectId      Int
  subject        Subject           @relation(fields: [subjectId], references: [id])
  gradeId        Int
  grade          Grade             @relation(fields: [gradeId], references: [id])
  academicYearId Int
  academicYear   AcademicYear      @relation(fields: [academicYearId], references: [id])
  schoolId       String?
  school         School?           @relation(fields: [schoolId], references: [id])
  results        Result[]
  finalResults   FinalResultExam[]
  schedules      ExamSchedule[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model ExamSchedule {
  id        Int      @id @default(autoincrement())
  exam      Exam     @relation(fields: [examId], references: [id])
  examId    Int
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId Int
  date      DateTime
  startTime DateTime
  endTime   DateTime
  venue     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GradeScale {
  id        Int          @id @default(autoincrement())
  name      String
  ranges    GradeRange[]
  schoolId  String?
  school    School?      @relation(fields: [schoolId], references: [id])
  // subjectId   Int?
  // subject     Subject?  @relation(fields: [subjectId], references: [id])
  examTypes ExamType[]
  isDefault Boolean      @default(false)
  results   Result[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([schoolId, isDefault])
}

model GradeRange {
  id           Int        @id @default(autoincrement())
  gradeScale   GradeScale @relation(fields: [gradeScaleId], references: [id])
  gradeScaleId Int
  letterGrade  String
  minScore     Float
  maxScore     Float
  gpa          Float?
  description  String?

  @@unique([gradeScaleId, letterGrade])
}

model Attendance {
  id        Int              @id @default(autoincrement())
  date      DateTime
  status    AttendanceStatus
  student   Student          @relation(fields: [studentId], references: [id])
  studentId String
  lesson    Lesson?          @relation(fields: [lessonId], references: [id])
  lessonId  Int?
  class     Class            @relation(fields: [classId], references: [id])
  classId   Int
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@unique([date, studentId])
}

model Department {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  // Specify the relation name for headTeacher
  headTeacher   Teacher? @relation("HeadTeacherRelation", fields: [headTeacherId], references: [id])
  headTeacherId String?  @unique

  // Specify the relation name for teachers
  teachers Teacher[] @relation("DepartmentTeachersRelation")

  school    School?  @relation(fields: [schoolId], references: [id])
  schoolId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id                String    @id @default(uuid())
  name              String
  type              String
  size              Int
  url               String
  sender            Teacher   @relation("SentFiles", fields: [senderId], references: [id])
  senderId          String
  recipients        Teacher[] @relation("ReceivedFiles")
  studentRecipients Student[] @relation("StudentFiles")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Meeting {
  id          String    @id @default(uuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  creator     Teacher   @relation("MeetingCreator", fields: [creatorId], references: [id])
  creatorId   String
  attendees   Teacher[] @relation("MeetingAttendees")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model TransferRecord {
  id           Int      @id @default(autoincrement())
  student      Student  @relation(fields: [studentId], references: [id])
  studentId    String
  fromSchool   School?  @relation("FromSchool", fields: [fromSchoolId], references: [id])
  fromSchoolId String?
  toSchool     School?  @relation("ToSchool", fields: [toSchoolId], references: [id])
  toSchoolId   String?
  transferDate DateTime
  reason       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model SpecializedProgram {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  type        ProgramType
  subjects    Subject[]
  school      School?     @relation(fields: [schoolId], references: [id])
  schoolId    String?
  students    Student[]
  teachers    Teacher[]
  resources   Resource[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Resource model to track specialized equipment or materials:
model Resource {
  id                   Int                @id @default(autoincrement())
  name                 String
  description          String?
  quantity             Int
  specializedProgram   SpecializedProgram @relation(fields: [specializedProgramId], references: [id])
  specializedProgramId Int
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

enum ExceptionType {
  DISCOUNT
  SCHOLARSHIP
  WAIVER
  ADJUSTMENT
  DISABILITY_SUPPORT
  FINANCIAL_AID
}

// enum ExceptionType {
//   DISCOUNT
//   SCHOLARSHIP
//   WAIVER
//   ADJUSTMENT
//   DISABILITY_SUPPORT
// FINANCIAL_AID

// //   SIBLING_DISCOUNT // For families with multiple children
// //   STAFF_CHILD // For children of staff members
// //   MERIT_SCHOLARSHIP // Based on academic performance
// //   SPORTS_SCHOLARSHIP // For sports excellence
// //    // Need-based financial assistance
// //   EARLY_PAYMENT // Discount for early fee payment
// //   FULL_PAYMENT // Discount for paying full year at once
// //   HARDSHIP // Temporary financial hardship cases
// //   SPECIAL_CONSIDERATION // For exceptional cases approved by board
// //   LOYALTY_DISCOUNT // For long-term students (e.g., 5+ years)
// //   ALUMNI_CHILD // For children of alumni
// //    // For students with special needs
// //   REFUGEE_STATUS // For refugee or asylum seeker students
// //   CULTURAL_PROGRAM // For students in specific cultural programs
// }

enum CreditStatus {
  ACTIVE // Credit can be used
  EXPIRED // Credit is allocated for future fee
  CANCELLED // Credit has been applied to a fee
}

enum ProgramType {
  STEM
  ROBOTICS
  CODING
  ARTS
  SPORTS
  LANGUAGE
  ENTREPRENEURSHIP
  OTHER
}

enum SchoolType {
  PUBLIC
  PRIVATE
  SPECIAL
}

enum SchoolCategory {
  DAY
  BOARDING
  DAY_AND_BOARDING
}

enum SubjectCategory {
  CORE
  ELECTIVE
  SPECIALIZED
  EXTRACURRICULAR
}

enum Stage {
  PRE_PRIMARY
  PRIMARY
  JUNIOR_SECONDARY
  SENIOR_SECONDARY
}

enum GradeLevel {
  PLAYGROUP
  PP1
  PP2
  GRADE1
  GRADE2
  GRADE3
  GRADE4
  GRADE5
  GRADE6
  GRADE7
  GRADE8
  GRADE9
  GRADE10
  GRADE11
  GRADE12
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum EmploymentStatus {
  FULL_TIME
  PART_TIME
  CONTRACT
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum AssessmentType {
  FORMATIVE
  SUMMATIVE
  PROJECT_BASED
  PERFORMANCE_TASK
  PRACTICAL
}

enum ProjectStatus {
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  GRADED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum ExamType {
  MIDTERM
  END_TERM
  MOCK
  FINAL
  ASSIGNMENT
  QUIZ
  NATIONAL
}

enum StudentStatus {
  ACTIVE
  GRADUATED
  TRANSFERRED
  SUSPENDED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  REPEATED
}

// enum PaymentMethod {
//   CASH
//   BANK_TRANSFER
//   CREDIT_CARD
//   MOBILE_MONEY
// }

enum ItemStatus {
  ACTIVE
  FUTURE
  INACTIVE
}

// enum PaymentStatus {
//   PENDING
//   COMPLETED
//   FAILED
//   REFUNDED
//   REVERSED
// }

// enum PaymentAllocationStrategy {
//   OLDEST_FIRST
//   PROPORTIONAL
//   CUSTOM
// }

enum LoanStatus {
  LOANED
  RETURNED
  OVERDUE
  LOST
}

enum CurriculumType {
  CBC
  OLD_8_4_4
  INTERNATIONAL
}

// enum LedgerEntryType {
//   FEE_CHARGE // When fee is assigned to student
//   PAYMENT_RECEIVED // When payment is made
//   CREDIT_ADDED // When credit is added to account
//   CREDIT_USED // When credit is used
//   EXCEPTION_APPLIED // When fee exception is applied
//   REFUND // When refund is issued
//   ADJUSTMENT // For manual adjustments
//   PENALTY // Late payment penalties
//   OPENING_BALANCE // Starting balance
//   CLOSING_BALANCE // Ending balance
// }
