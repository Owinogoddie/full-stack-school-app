interface FeeTemplateVersion {
  id: string;
  feeTemplateId: string;
  version: number;
  baseAmount: number;
  effectiveDate: Date;
  changes: {
    field: string;
    oldValue: any;
    newValue: any;
  }[];
  reason?: string;
  createdBy: string;
}

// Server action to update template
export async function updateFeeTemplate(
  templateId: string,
  updates: Partial<FeeTemplate>,
  reason?: string
) {
  const currentTemplate = await prisma.feeTemplate.findUnique({
    where: { id: templateId },
    include: { history: true }
  });

  if (!currentTemplate) throw new Error("Template not found");

  // Create new version
  const newVersion = currentTemplate.version + 1;

  // Record changes in history
  await prisma.feeHistory.create({
    data: {
      feeTemplateId: templateId,
      previousAmount: currentTemplate.baseAmount,
      newAmount: updates.baseAmount || currentTemplate.baseAmount,
      changeDate: new Date(),
      reason,
      version: newVersion,
      changes: Object.entries(updates).map(([field, value]) => ({
        field,
        oldValue: currentTemplate[field],
        newValue: value
      }))
    }
  });

  // Update template with new version
  return prisma.feeTemplate.update({
    where: { id: templateId },
    data: {
      ...updates,
      version: newVersion
    }
  });
}

// Get template at specific version
export async function getFeeTemplateVersion(
  templateId: string,
  version?: number
) {
  const template = await prisma.feeTemplate.findUnique({
    where: { id: templateId },
    include: {
      history: {
        orderBy: { version: 'desc' }
      }
    }
  });

  if (!template) throw new Error("Template not found");

  if (!version) return template; // Current version

  const historicalVersion = template.history.find(h => h.version === version);
  if (!historicalVersion) throw new Error("Version not found");

  return {
    ...template,
    ...historicalVersion,
    baseAmount: historicalVersion.newAmount
  };
}